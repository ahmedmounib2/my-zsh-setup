# Powerlevel10k Instant Prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# PATH Configuration
export PATH="$HOME/.npm-global/bin:$PATH"

# Oh My Zsh Theme Only (Not plugins)
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Zinit Plugin Manager
if [[ ! -f ~/.zinit/bin/zinit.zsh ]]; then
  mkdir -p ~/.zinit
  git clone https://github.com/zdharma-continuum/zinit ~/.zinit/bin
fi
source ~/.zinit/bin/zinit.zsh

# Zinit Plugins: performance boost
zinit light romkatv/zsh-defer

# Language & Tooling
zinit light zsh-users/zsh-completions
zinit ice wait"1" silent; zinit light zsh-users/zsh-autosuggestions
zinit ice wait"2" silent; zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-history-substring-search

# CLI Tools & Enhancements
zinit light Aloxaf/fzf-tab
zinit light rupa/z
zinit light djui/alias-tips
zinit light MichaelAquilina/zsh-you-should-use

# Oh My Zsh Plugins via Zinit snippets
zinit ice wait"3" silent; zinit snippet OMZ::plugins/docker
zinit ice wait"4" silent; zinit snippet OMZ::plugins/docker-compose
zinit snippet OMZ::plugins/command-not-found
zinit snippet OMZ::plugins/web-search
zinit snippet OMZ::plugins/safe-paste
zinit snippet OMZ::plugins/copybuffer

# Performance & History
DISABLE_AUTO_UPDATE="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
ZSH_AUTOSUGGEST_MANUAL_REBIND="1"
ZSH_HIGHLIGHT_MAXLENGTH="300"
HIST_IGNORE_SPACE="true"
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=50000
setopt EXTENDED_HISTORY HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_ALL_DUPS HIST_FIND_NO_DUPS SHARE_HISTORY
umask 027
setopt no_clobber

# Init completions (only once)
autoload -Uz compinit && compinit -u

# Source Oh My Zsh (theme only)
source "$ZSH"/oh-my-zsh.sh

# CLI Tools: bat & tldr
if ! type bat &>/dev/null; then
  if command -v batcat &>/dev/null; then
    alias bat="batcat"
  else
    echo -e "\033[1;33m⚠️ Install bat: 'sudo apt install bat' or 'brew install bat'\033[0m"
  fi
fi

if ! command -v tldr &>/dev/null; then
  echo -e "\033[1;33m⚠️ Install tldr: 'npm install -g tldr'\033[0m"
fi


# fnm install snippet (must come before detection)
FNM_PATH="$HOME/.local/share/fnm"
if [[ -d "$FNM_PATH" ]]; then
  export PATH="$FNM_PATH:$PATH"
  eval "$(fnm env)"        # sets up auto‐cd hook
fi

# Node Version Management
NODE_VERSION_MANAGER="none"
if command -v fnm &>/dev/null; then
  # fnm is on PATH, use it
  NODE_VERSION_MANAGER="fnm"
elif [[ -s "$HOME/.nvm/nvm.sh" ]]; then
  # fallback to nvm
  export NVM_DIR="$HOME/.nvm"
  . "$NVM_DIR/nvm.sh"
  . "$NVM_DIR/bash_completion"
  NODE_VERSION_MANAGER="nvm"
fi


# Feedback & auto-switch
case "$NODE_VERSION_MANAGER" in
  fnm)
    if [[ -z "$FNM_ALREADY_INIT" ]]; then
      echo -e "✓ Using fnm for Node.js version management"
      eval "$(fnm env --use-on-cd)"
      echo -e "✓ fnm auto-switch active"
      export FNM_ALREADY_INIT=1
    fi
    ;;
  nvm)
    echo -e "⚠️ Using nvm fallback (fnm not found)"
    autoload -U add-zsh-hook
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc
    echo -e "⚠️ nvm fallback auto-switch active"
    ;;
  *)
    echo -e "❌ No Node version manager found. Install fnm or nvm."
    ;;
esac

# Auto Version Switching
autoload -U add-zsh-hook

node_version_check() {
  [[ "$NODE_VERSION_MANAGER" == "none" ]] && return
  if [[ -f .nvmrc || -f .node-version ]]; then
    local desired current
    current=$(node -v 2>/dev/null)
    desired=$(cat .nvmrc .node-version 2>/dev/null | head -n1 | tr -d '\t\r\n ')
    case "$NODE_VERSION_MANAGER" in
      fnm)
        if [[ "$(fnm current)" != *"$desired"* ]]; then
          echo -e "\033[1;33m⚠️ Switching to Node $desired (fnm)\033[0m"
          fnm use "$desired" || fnm install "$desired"
        fi
        ;;
      nvm)
        if [[ "$(nvm current)" != "$desired" ]]; then
          echo -e "\033[1;33m⚠️ Switching to Node $desired (nvm)\033[0m"
          nvm use "$desired" || nvm install "$desired"
        fi
        ;;
    esac
  else
    case "$NODE_VERSION_MANAGER" in
      fnm)
        echo -e "\033[1;34mℹ️ No .nvmrc or .node-version — using default fnm version (18)\033[0m"
        fnm default 18
        ;;
      nvm)
        echo -e "\033[1;34mℹ️ No .nvmrc or .node-version — using default nvm version\033[0m"
        nvm use default
        ;;
    esac
  fi
}

load-nvmrc() {
  [[ -n "$NVMRC_ACTIVE" ]] && return
  NVMRC_ACTIVE=1
  (( EPOCHSECONDS - ${_NVMRC_CACHE_TIME:-0} > 1 )) && unset _NVMRC_PATH_CACHE
  if ! command -v nvm &>/dev/null; then
    echo -e "\033[0;31m✗ nvm not loaded\033[0m" >&2
    unset NVMRC_ACTIVE; return 1
  fi
  local current desired nvmrc_path
  current=$(nvm version)
  nvmrc_path=${_NVMRC_PATH_CACHE:-$(nvm_find_nvmrc)}
  if [[ -n "$nvmrc_path" ]]; then
    desired=$(<"$nvmrc_path"); desired=${desired//[$'\t\r\n ']/}
    if [[ -z "$desired" || "$desired" =~ [^a-zA-Z0-9./*-] ]]; then
      echo -e "\033[0;31m✗ Invalid .nvmrc: ${desired:-empty}\033[0m" >&2
      unset NVMRC_ACTIVE _NVMRC_PATH_CACHE; return 1
    fi
    if [[ "$desired" != "$current" ]]; then
      if ! nvm ls "$desired" &>/dev/null; then
        echo -e "\033[1;36m⌛ Installing Node $desired...\033[0m"
        nvm install "$desired" >/dev/null 2>&1 || {
          echo -e "\033[0;31m✗ Install failed\033[0m" >&2
          unset NVMRC_ACTIVE _NVMRC_PATH_CACHE; return 1
        }
      fi
      nvm use "$desired" >/dev/null 2>&1 && echo -e "\033[1;32m✓ Node $desired\033[0m"
    else
      echo -e "\033[1;33mℹ️ Node $desired active\033[0m"
    fi
    _NVMRC_PATH_CACHE=$nvmrc_path; _NVMRC_CACHE_TIME=$EPOCHSECONDS
  elif [[ "$current" != "system" ]]; then
    if nvm ls system | grep -q '(not installed)'; then
      echo -e "\033[0;33m⚠️ System Node unavailable\033[0m" >&2
      unset NVMRC_ACTIVE; return 1
    fi
    nvm use system >/dev/null 2>&1 && echo -e "\033[1;34m↩ System Node activated\033[0m"
  fi
  unset NVMRC_ACTIVE
}

# Always show auto-switch banners
if [[ "$NODE_VERSION_MANAGER" == "fnm" ]]; then
  echo -e "\033[1;32m✓ fnm auto-switch active\033[0m"
elif [[ "$NODE_VERSION_MANAGER" == "nvm" ]]; then
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
  echo -e "\033[1;33m⚠️ nvm fallback auto-switch active\033[0m"
else
  echo -e "\033[1;31m❌ No Node.js version manager available for auto-switching\033[0m"
fi

add-zsh-hook chpwd node_version_check
node_version_check

# Aliases
alias nr="npm run"
alias nrd="npm run dev"
alias nrb="npm run build"
alias nrt="npm test"
alias npx="npx --no-install"
alias npmi="npm install"
alias npms="npm start"
alias clean-node="rm -rf node_modules package-lock.json && npm cache clean --force && echo '\033[1;32m✓ Node modules and cache cleaned\033[0m'"
alias clean-logs="find . -maxdepth 3 -name '*.log' -type f -delete && echo '\033[1;32m✓ Log files deleted\033[0m'"

# Git
alias gclean='git branch --merged | grep -v "\*" | xargs -n 1 git branch -d'
alias gprune='git remote prune origin && git fetch -p'
alias gac="git add . && git commit -m"
alias gpf="git push --force-with-lease"
alias gpr="git pull --rebase"

# Docker
alias dps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"'
alias dls='docker container ls -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"'
alias dc="docker-compose"
alias dcb="docker-compose build"
alias dcu="docker-compose up"

# Utilities
alias lg="lazygit"
alias tl="tldr"
alias ll='exa -l --group-directories-first --icons --git --no-permissions --no-user'
alias gs="git status -sb"
alias dev='cd ~/Dev && ls'
alias vs="code"
alias cpv='rsync -ah --info=progress2'
alias ports='netstat -tulanp'

# CI/CD Automation
ci() {
  if [[ -f ./.github/workflows/main.yml ]]; then
    gh workflow run main.yml
  elif [[ -f ./.gitlab-ci.yml ]]; then
    gitlab-runner exec docker test
  else
    echo "No CI config found"
  fi
}

# WSL Path Conversion
cdw() {
  local win_path=${(Q)${(z)@}}
  local wsl_path=$(wslpath -u "$win_path" 2>/dev/null)
  if [[ -d "$wsl_path" ]]; then
    cd "$wsl_path" && ll
  else
    echo "Invalid path: $win_path"
  fi
}

# Powerlevel10k Finalization
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# Startup Performance Monitoring
if [[ -n "$ZSH_PROFILE" ]]; then
  zmodload zsh/zprof
  zprof >! ~/zsh_profile.log
fi
