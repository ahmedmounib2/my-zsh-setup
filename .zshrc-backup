# ─── POWERLEVEL10K INSTANT PROMPT ────────────────────────────────────────────────────────────
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ─── PATH SETUP ──────────────────────────────────────────────────────────────────────────────
export PATH="$HOME/.npm-global/bin:$PATH"

# ─── CLI TOOLS CHECK ────────────────────────────────────────────────────────────────────────
# bat (pretty cat)
if ! type bat &>/dev/null; then
  if command -v batcat &>/dev/null; then
    alias bat="batcat"
  else
    echo -e "\033[1;33m⚠️ Install bat: 'sudo apt install bat' or 'brew install bat'\033[0m"
  fi
fi

# tldr (simplified man)
if ! command -v tldr &>/dev/null; then
  echo -e "\033[1;33m⚠️ Install tldr: 'npm install -g tldr'\033[0m"
fi

# ─── NODE VERSION MANAGEMENT ────────────────────────────────────────────────
# fnm setup (must come before detection)
FNM_PATH="$HOME/.local/share/fnm"
if [[ -d "$FNM_PATH" ]]; then
  export PATH="$FNM_PATH:$PATH"

  if command -v fnm &>/dev/null; then
    eval "$(fnm env)"  # initialize fnm if available
  else
    echo -e "\033[1;33m⚠️ fnm not found – falling back to nvm if available\033[0m"
  fi
fi


# Node Version Manager Detection
NODE_VERSION_MANAGER="none"
if command -v fnm &>/dev/null; then
  NODE_VERSION_MANAGER="fnm"
elif [[ -s "$HOME/.nvm/nvm.sh" ]]; then
  export NVM_DIR="$HOME/.nvm"
  . "$NVM_DIR/nvm.sh"
  . "$NVM_DIR/bash_completion"
  NODE_VERSION_MANAGER="nvm"
fi

# Enhanced Node Version Management
autoload -U add-zsh-hook

# Function to get current node version
get_current_node_version() {
  case "$NODE_VERSION_MANAGER" in
    fnm)
      fnm current 2>/dev/null || echo "none"
      ;;
    nvm)
      nvm current 2>/dev/null || echo "none"
      ;;
    *)
      echo "none"
      ;;
  esac
}

# Main version check function (for fnm and general cases)
node_version_check() {
  [[ "$NODE_VERSION_MANAGER" == "none" ]] && return

  local current_version=$(get_current_node_version)
  local version_file=""
  [[ -f .nvmrc ]] && version_file=".nvmrc"
  [[ -f .node-version ]] && version_file=".node-version"

  if [[ -n "$version_file" ]]; then
    local desired=$(<"$version_file")
    desired=${desired//[$'\t\r\n ']/}

    case "$NODE_VERSION_MANAGER" in
      fnm)
        if [[ "$current_version" != *"$desired"* ]]; then
          echo -e "\033[1;33m⚠️ Switching to Node $desired (fnm)\033[0m"
          fnm use "$desired" || fnm install "$desired"
          current_version=$(get_current_node_version)
        fi
        echo -e "\033[1;32m✓ Using Node $current_version (from ${version_file})\033[0m"
        ;;
      nvm)
        # Let load-nvmrc handle this case to avoid duplicate messages
        load-nvmrc
        ;;
    esac
  else
    case "$NODE_VERSION_MANAGER" in
      fnm)
        local default_version=$(fnm default 2>/dev/null)
        if [[ "$current_version" != *"$default_version"* ]]; then
          echo -e "\033[1;34mℹ️ Using default Node version\033[0m"
          fnm default
          current_version=$(get_current_node_version)
        fi
        echo -e "\033[1;36mℹ️ No .nvmrc found. Current Node version: $current_version\033[0m"
        ;;
      nvm)
        # Let load-nvmrc handle this case to avoid duplicate messages
        load-nvmrc
        ;;
    esac
  fi
}

# Original nvmrc loader (for nvm fallback)
load-nvmrc() {
  # Only run if nvm is the version manager
  [[ "$NODE_VERSION_MANAGER" != "nvm" ]] && return

  # Prevent re-entrance
  [[ -n "$NVMRC_ACTIVE" ]] && return
  NVMRC_ACTIVE=1

  # Reset cache if older than 1 second (can adjust as needed)
  (( EPOCHSECONDS - ${_NVMRC_CACHE_TIME:-0} > 1 )) && unset _NVMRC_PATH_CACHE

  # Check that nvm command exists
  if ! command -v nvm &>/dev/null; then
    echo -e "\033[0;31m✗ nvm not loaded\033[0m" >&2
    unset NVMRC_ACTIVE
    return 1
  fi

  local current desired nvmrc_path
  current=$(nvm current)  # get current active node version
  nvmrc_path=${_NVMRC_PATH_CACHE:-$(nvm_find_nvmrc)}  # locate .nvmrc

  if [[ -n "$nvmrc_path" ]]; then
    desired=$(<"$nvmrc_path")           # read desired version
    desired=${desired//[$'\t\r\n ']/}  # strip whitespace

    # Validate version string (only allow alphanumeric, dot, slash, star, dash)
    if [[ -z "$desired" || "$desired" =~ [^a-zA-Z0-9./*-] ]]; then
      echo -e "\033[0;31m✗ Invalid .nvmrc: ${desired:-empty}\033[0m" >&2
      unset NVMRC_ACTIVE _NVMRC_PATH_CACHE
      return 1
    fi

    # If desired differs from current, switch versions
    if [[ "$desired" != "$current" ]]; then
      # If desired version not installed, install it
      if ! nvm ls "$desired" &>/dev/null; then
        echo -e "\033[1;36m⌛ Installing Node $desired...\033[0m"
        if ! nvm install "$desired"; then
          echo -e "\033[0;31m✗ Install failed\033[0m" >&2
          unset NVMRC_ACTIVE _NVMRC_PATH_CACHE
          return 1
        fi
      fi

      # IMPORTANT: run 'nvm use' in current shell, show output and error if any
      if nvm use "$desired"; then
        echo -e "\033[1;32m✓ Node $desired activated\033[0m"
      else
        echo -e "\033[0;31m✗ Failed to switch to Node $desired\033[0m" >&2
        unset NVMRC_ACTIVE _NVMRC_PATH_CACHE
        return 1
      fi
    else
      echo -e "\033[1;33mℹ️ Node $desired already active\033[0m"
    fi

    _NVMRC_PATH_CACHE=$nvmrc_path
    _NVMRC_CACHE_TIME=$EPOCHSECONDS
  else
    # No .nvmrc file found - optionally fallback to system node or just print info
    if [[ "$current" != "system" ]]; then
      if nvm ls system | grep -q '(not installed)'; then
        echo -e "\033[0;33m⚠️ System Node unavailable\033[0m" >&2
        unset NVMRC_ACTIVE
        return 1
      fi
      if nvm use system; then
        echo -e "\033[1;34m↩ System Node activated\033[0m"
      else
        echo -e "\033[0;31m✗ Failed to activate system Node\033[0m" >&2
        unset NVMRC_ACTIVE
        return 1
      fi
    else
      echo -e "\033[1;36mℹ️ No .nvmrc found. Current Node version: $current\033[0m"
    fi
  fi

  unset NVMRC_ACTIVE
}


# Initialize version manager and hooks
case "$NODE_VERSION_MANAGER" in
  fnm)
    if [[ -z "$FNM_ALREADY_INIT" ]]; then
      echo -e "\033[1;32m✓ Using fnm for Node.js version management\033[0m"
      eval "$(fnm env --use-on-cd)"
      export FNM_ALREADY_INIT=1
    fi
    add-zsh-hook chpwd node_version_check
    node_version_check  # Run once at startup
    ;;
  nvm)
    echo -e "\033[1;33m⚠️ Using nvm fallback (fnm not found)\033[0m"
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc  # Run once at startup
    ;;
  *)
    echo -e "\033[1;31m❌ No Node version manager found. Install fnm or nvm.\033[0m"
    ;;
esac

# ─── OH-MY-ZSH + POWERLEVEL10K ──────────────────────────────────────────────────────────────
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# ─── ZINIT SETUP ────────────────────────────────────────────────────────────────────────────
if [[ ! -f ~/.zinit/bin/zinit.zsh ]]; then
  mkdir -p ~/.zinit
  git clone https://github.com/zdharma-continuum/zinit ~/.zinit/bin
fi
source ~/.zinit/bin/zinit.zsh

# Zinit Plugins
zinit light romkatv/zsh-defer
zinit light zsh-users/zsh-completions
zinit ice wait"1" silent; zinit light zsh-users/zsh-autosuggestions
zinit ice wait"2" silent; zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-history-substring-search
zinit light Aloxaf/fzf-tab
zinit light rupa/z
zinit light djui/alias-tips
zinit light MichaelAquilina/zsh-you-should-use

# Oh My Zsh Plugins via Zinit
zinit ice wait"3" silent; zinit snippet OMZ::plugins/docker
zinit ice wait"4" silent; zinit snippet OMZ::plugins/docker-compose
zinit snippet OMZ::plugins/command-not-found
zinit snippet OMZ::plugins/web-search
zinit snippet OMZ::plugins/safe-paste
zinit snippet OMZ::plugins/copybuffer

# ─── PERFORMANCE, HISTORY, ENV ─────────────────────────────────────────────────────────────
DISABLE_AUTO_UPDATE="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
ZSH_AUTOSUGGEST_MANUAL_REBIND="1"
ZSH_HIGHLIGHT_MAXLENGTH="300"
HIST_IGNORE_SPACE="true"
HISTFILE="$HOME/.zsh_history"
HISTSIZE=100000
SAVEHIST=50000
setopt EXTENDED_HISTORY HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_ALL_DUPS HIST_FIND_NO_DUPS SHARE_HISTORY
umask 027
setopt no_clobber

# Init completions (only once)
autoload -Uz compinit && compinit -u

# Source Oh My Zsh (theme only)
source "$ZSH"/oh-my-zsh.sh

# ─── GIT CONFIG (SAFE DIRECTORY) ────────────────────────────────────────────────────────────
git config --global --add safe.directory '*'

# ─── P10K CONFIGURATION ────────────────────────────────────────────────────────────────────
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ─── SHELL OPTIONS ──────────────────────────────────────────────────────────────────────────
setopt prompt_subst
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt interactive_comments

# ─── ALIASES ────────────────────────────────────────────────────────────────────────────────
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias gs='git status'
alias gl='git log'
alias gp='git push'
alias gpl='git pull'
alias gc='git commit'
alias ga='git add'
alias gco='git checkout'
alias gstash='git stash'
alias gpop='git stash pop'

# ─── FZF INTEGRATION (if installed) ────────────────────────────────────────────────────────
if command -v fzf &>/dev/null; then
  export FZF_DEFAULT_COMMAND='fd --type f'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND='fd --type d'
  export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border"
fi

# ─── FINAL MESSAGE ────────────────────────────────────────────────────────────────────────
echo -e "\033[1;32m✔️  ZSH environment loaded successfully\033[0m"