# ========================
# Powerlevel10k Instant Prompt
# ========================
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ========================
# PATH Configuration
# ========================
export PATH="$HOME/.npm-global/bin:$PATH"

# ========================
# Oh My Zsh Configuration
# ========================
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# ========================
# Plugin Configuration
# ========================
plugins=(
 git
  npm
  node
  docker
  docker-compose
  zsh-autosuggestions
  zsh-syntax-highlighting
  you-should-use
  zsh-completions
  command-not-found
  fzf-tab
  z
  zsh-history-substring-search
  alias-tips
  web-search
  safe-paste
  copybuffer
)

# ========================
# Performance Optimizations
# ========================
DISABLE_AUTO_UPDATE="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
ZSH_AUTOSUGGEST_MANUAL_REBIND="1"
ZSH_HIGHLIGHT_MAXLENGTH="300"
HIST_IGNORE_SPACE="true"
autoload -Uz compinit && compinit -u

# ========================
# Source Oh My Zsh
# ========================
source "$ZSH"/oh-my-zsh.sh

# ========================
# Development Aliases
# ========================

# MERN Development Shortcuts
alias nr="npm run"
alias nrd="npm run dev"
alias nrb="npm run build"
alias nrt="npm test"
alias npx="npx --no-install"
alias npmi="npm install"
alias npms="npm start"
alias clean-node="rm -rf node_modules package-lock.json && npm cache clean --force && echo '\033[1;32m✓ Node modules and cache cleaned\033[0m'"
alias clean-logs="find . -maxdepth 3 -name '*.log' -type f -delete && echo '\033[1;32m✓ Log files deleted\033[0m'"

# Git Aliases
alias gac="git add . && git commit -m"
alias gpf="git push --force-with-lease"
alias gpr="git pull --rebase"

# Docker Aliases
alias dc="docker-compose"
alias dcb="docker-compose build"
alias dcu="docker-compose up"

# Cleanup & Debugging Aliases
alias clean-node="rm -rf node_modules package-lock.json && npm cache clean --force && echo 'Node cache cleaned'"
alias clean-logs="find . -name '*.log' -type f -delete && echo 'Logs deleted'"

# CLI Helpers
alias lg="lazygit"
alias tl="tldr"
alias ll='exa -l --group-directories-first --icons --git --no-permissions --no-user'

# Quick cd to Dev directory alias
alias dev='cd ~/Dev && ls'

# ========================
# CI/CD Automation
# ========================
ci() {
  if [ -f ./.github/workflows/main.yml ]; then
    gh workflow run main.yml
  elif [ -f ./.gitlab-ci.yml ]; then
    gitlab-runner exec docker test
  else
    echo "No CI config found"
  fi
}

# ========================
# WSL Path Conversion
# ========================
cdw() {
  local win_path=${(Q)${(z)@}}
  local wsl_path=$(wslpath -u "${win_path}" 2>/dev/null)
  if [ -d "$wsl_path" ]; then
    cd "$wsl_path" && ll
  else
    echo "Invalid path: $win_path"
  fi
}

# ========================
# Powerlevel10k Finalization
# ========================
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ========================
# Node Version Manager
# ========================
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Add ZSH hook to check for .nvmrc on directory change
autoload -U add-zsh-hook

# Define function to auto-load the correct Node version
load-nvmrc() {
  # Prevent recursion and check nvm availability
  [[ -n "$NVMRC_ACTIVE" ]] && return
  NVMRC_ACTIVE=true
  (( EPOCHSECONDS - ${_NVMRC_CACHE_TIME:-0} > 1 )) && unset _NVMRC_PATH_CACHE

  if ! command -v nvm >/dev/null 2>&1; then
    echo -e "\033[0;31m✗ nvm not loaded\033[0m" >&2
    unset NVMRC_ACTIVE
    return 1
  fi

  # Cache nvmrc discovery for performance
  local current_node=$(nvm version)
  local nvmrc_path=${_NVMRC_PATH_CACHE:-$(nvm_find_nvmrc)}
  local desired_node

  if [[ -n "$nvmrc_path" ]]; then
    desired_node=$(<"$nvmrc_path")
    desired_node=${desired_node//[$'\t\r\n']/}  # Sanitize newlines

    if [[ -z "$desired_node" || "$desired_node" =~ [^a-zA-Z0-9./*-] ]]; then
      echo -e "\033[0;31m✗ Invalid .nvmrc: ${desired_node:-empty}\033[0m" >&2
      unset NVMRC_ACTIVE _NVMRC_PATH_CACHE
      return 1
    fi

    if [[ "$desired_node" != "$current_node" ]]; then
      if ! nvm ls "$desired_node" &>/dev/null; then
        echo -e "\033[1;36m⌛ Installing Node $desired_node...\033[0m"
        nvm install "$desired_node" >/dev/null 2>&1 || {
          echo -e "\033[0;31m✗ Install failed\033[0m" >&2
          unset NVMRC_ACTIVE _NVMRC_PATH_CACHE
          return 1
        }
      fi

      nvm use "$desired_node" >/dev/null 2>&1 && \
        echo -e "\033[1;32m✓ Node ${desired_node}\033[0m"
    else
      echo -e "\033[1;33mℹ Node ${desired_node} active\033[0m"
    fi

    _NVMRC_PATH_CACHE=$nvmrc_path
    _NVMRC_CACHE_TIME=$EPOCHSECONDS

  elif [[ "$current_node" != "system" ]]; then
    if nvm ls system | grep -q '(not installed)'; then
      echo -e "\033[0;33m⚠ System Node unavailable\033[0m" >&2
      unset NVMRC_ACTIVE
      return 1
    fi

    nvm use system >/dev/null 2>&1 && \
      echo -e "\033[1;34m↩ System Node activated\033[0m"
  fi

  unset NVMRC_ACTIVE
}


# Attach the function to directory change
add-zsh-hook chpwd load-nvmrc
# Run immediately on terminal start
load-nvmrc